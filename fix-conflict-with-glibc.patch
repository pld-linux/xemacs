--- xemacs-21.5.34/src/regex.c~	2013-08-21 19:43:45.000000000 +0200
+++ xemacs-21.5.34/src/regex.c	2015-03-26 21:13:43.395266312 +0100
@@ -1357,9 +1357,9 @@
 #if defined (MATCH_MAY_ALLOCATE)
 /* 4400 was enough to cause a crash on Alpha OSF/1,
    whose default stack limit is 2mb.  */
-int re_max_failures = 40000;
+int xemacs_re_max_failures = 40000;
 #else
-int re_max_failures = 4000;
+int xemacs_re_max_failures = 4000;
 #endif
 
 union fail_stack_elt
@@ -1413,7 +1413,7 @@
 #endif
 
 
-/* Double the size of FAIL_STACK, up to approximately `re_max_failures' items.
+/* Double the size of FAIL_STACK, up to approximately `xemacs_re_max_failures' items.
 
    Return 1 if succeeds, and 0 if either ran out of memory
    allocating space for it or it was already too large.
@@ -1421,7 +1421,7 @@
    REGEX_REALLOCATE_STACK requires `destination' be declared.   */
 
 #define DOUBLE_FAIL_STACK(fail_stack)					\
-  ((fail_stack).size > re_max_failures * MAX_FAILURE_ITEMS		\
+  ((fail_stack).size > xemacs_re_max_failures * MAX_FAILURE_ITEMS		\
    ? 0									\
    : ((fail_stack).stack = (fail_stack_elt_t *)				\
         REGEX_REALLOCATE_STACK ((fail_stack).stack, 			\
@@ -3636,11 +3636,11 @@
     int num_regs = bufp->re_ngroups + 1;
 
     /* Since DOUBLE_FAIL_STACK refuses to double only if the current size
-       is strictly greater than re_max_failures, the largest possible stack
-       is 2 * re_max_failures failure points.  */
-    if (fail_stack.size < (2 * re_max_failures * MAX_FAILURE_ITEMS))
+       is strictly greater than xemacs_re_max_failures, the largest possible stack
+       is 2 * xemacs_re_max_failures failure points.  */
+    if (fail_stack.size < (2 * xemacs_re_max_failures * MAX_FAILURE_ITEMS))
       {
-	fail_stack.size = (2 * re_max_failures * MAX_FAILURE_ITEMS);
+	fail_stack.size = (2 * xemacs_re_max_failures * MAX_FAILURE_ITEMS);
 
 	if (! fail_stack.stack)
 	  fail_stack.stack
